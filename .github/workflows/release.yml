name: Build and Release Installers

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    permissions:
      id-token: write
      pages: write
      contents: write
    # 各 OS でビルドするためのマトリクス
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Flutter SDK セットアップ versionは数字できちんと修正する事
      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: 'stable'
          version: 3.22.0

      # - name: Upgrade Flutter and show version
      #   run: |
      #     flutter upgrade
      #     flutter --version

      # - name: Install Flutter dependencies
      #   run: flutter pub get

      - name: Install dependencies for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "Installing Windows dependencies"
          echo "Enabling Developer Mode"
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /v AllowDevelopmentWithoutDevLicense /d 1 /f
          echo "Run on Windows and installed dependencies for Windows"

      - name: Install dependencies for macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "Installing macOS dependencies"
          brew install libjpeg libpng libtiff freetype
          sudo softwareupdate --install-rosetta --agree-to-license
          echo "Run on macOS and installed dependencies for macOS"

      - name: Install dependencies for Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          echo "Installing Linux dependencies"
          sudo apt-get update
          sudo apt-get install -y libjpeg-dev libpng-dev libtiff-dev zlib1g-dev libfreetype6-dev
          sudo apt install libgtk-3-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
          sudo apt install libmpv-dev mpv
          sudo apt-get install -y ninja-build g++ cmake clang
          echo "Run on Linux and installed dependencies for Linux"

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract version from pyproject.toml on Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $VERSION = python -c "import tomllib; f = open('pyproject.toml', 'rb'); config = tomllib.load(f); f.close(); print(config['project']['version'])"
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /v AllowDevelopmentWithoutDevLicense /d 1 /f
          echo "Version extracted: $VERSION"

      - name: Extract version from pyproject.toml on macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          VERSION=$(python -c 'import tomllib; f = open("pyproject.toml", "rb"); config = tomllib.load(f); f.close(); print(config["project"]["version"])')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      - name: Extract version from pyproject.toml on Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          VERSION=$(python -c 'import tomllib; f = open("pyproject.toml", "rb"); config = tomllib.load(f); f.close(); print(config["project"]["version"])')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      - name: Determine OS for flet build
        id: set-os
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "os=windows" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "os=macos" >> $GITHUB_OUTPUT
          else
            echo "os=linux" >> $GITHUB_OUTPUT
          fi

      - name: Create build directory if not exists
        run: mkdir -p build/${{ steps.set-os.outputs.os }}

      - name: Build executable with flet
        run: flet build ${{ steps.set-os.outputs.os }} --output build/${{ steps.set-os.outputs.os }}

      # --- インストーラー作成 ---
      # Windows 用（NSIS を利用）
      - name: Create installer for Windows
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # NSIS のインストール（Chocolatey 経由）
          choco install nsis -y
          # 環境変数からバージョンを変数に入れる(PowerShellでの変数展開問題を回避)
          $VERSION = "${{ env.VERSION  }}"
          # NSISスクリプトを作成(バージョン変数を正しく設定)
          # build 時の出力パスはここでは build\windows\YDownloader.exe
          $installerScript = @"
          !define PRODUCT_NAME "YDownloader"
          !define VERSION "$VERSION"
          !define INSTALL_DIR "\$PROGRAMFILES\YDownloader"
          !define CONFIG_DIR "\$LOCALAPPDATA\YDownloader"
          OutFile "YDownloader-$VERSION-Installer.exe"
          InstallDir \${INSTALL_DIR}
          Page directory
          Page instfiles
          Section "Install"
            SetOutPath \${INSTALL_DIR}
            File "build\windows\YDownloader.exe"
            SetOutPath \${CONFIG_DIR}\configs
            File /r "configs\*.*"
            SetOutPath \${CONFIG_DIR}\external
            File /r "external\*.*"
          SectionEnd
          "@
          # NSISでインストーラーをビルド
          $installerScript | Out-File -FilePath installer.nsi -Encoding UTF8

      # macOS 用（pkg ビルダーを利用）
      - name: Create installer for macOS
        if: runner.os == 'macOS'
        shell: bash
        run: |
          # 環境変数からバージョンを変数に入れる
          VERSION="${{ env.VERSION }}"
          # pkgbuild でインストーラー作成するための一時フォルダを用意
          mkdir -p pkgroot/Applications
          # flet build で作成された .app を Applications 配下へコピー
          cp -R build/macos/YDownloader.app pkgroot/Applications/
          # configs と external は macOS では ~/Library/Application Support 相当へインストールする例
          mkdir -p pkgroot/Library/Application\ Support/YDownloader
          cp -R configs pkgroot/Library/Application\ Support/YDownloader/
          cp -R external pkgroot/Library/Application\ Support/YDownloader/
          # ※ postinstall スクリプト等を追加すれば、より細かい処理も可能です
          pkgbuild --root pkgroot --identifier com.ydownloader.app --version "${VERSION}" --install-location / YDownloader-${VERSION}-Installer.pkg

      # Linux 用（tar.gz による簡易インストーラー例）
      - name: Create installer for Linux
        if: runner.os == 'Linux'
        shell: bash
        run: |
          # 環境変数からバージョンを変数に入れる
          VERSION="${{ env.VERSION }}"
          mkdir -p installer/opt/YDownloader
          cp build/linux/YDownloader installer/opt/YDownloader/
          # Linux では、configs と external を /etc/ydownloader 等へ配置する例
          mkdir -p installer/etc/ydownloader
          cp -R configs installer/etc/ydownloader/
          cp -R external installer/etc/ydownloader/
          # installer フォルダ以下を tar.gz 形式に圧縮
          tar czvf YDownloader-${VERSION}-Installer.tar.gz -C installer .

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: Installer-${{ steps.set-os.outputs.os }}-${{ env.VERSION }}
          path: |
            YDownloader-*-Installer.exe
            YDownloader-*-Installer.pkg
            YDownloader-*-Installer.tar.gz

  # --- GitHub Pages 用サイトの自動生成 ---
  publish:
    needs: build
    permissions:
      id-token: write
      pages: write
      contents: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Extract version from pyproject.toml
        id: get_version
        run: |
          VERSION=$(python -c 'import tomllib; f = open("pyproject.toml", "rb"); config = tomllib.load(f); f.close(); print(config["project"]["version"])')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version extracted: $VERSION"

      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers

      - name: Move installers to root directory
        run: |
          mkdir -p releases
          find installers -type f -name "YDownloader-*" -exec cp {} releases/ \;

      - name: Generate index.html for download site
        run: |
          mkdir -p gh-pages
          # 各OSのインストーラーのファイル名を取得
          WIN_FILE=$(find releases -maxdepth 1 -type f -name "*.exe" | head -n1)
          LINUX_FILE=$(find releases -maxdepth 1 -type f -name "*.tar.gz" | head -n1)
          MAC_FILE=$(find releases -maxdepth 1 -type f -name "*.pkg" | head -n1)
          WIN_BASENAME=$(basename "$WIN_FILE")
          LINUX_BASENAME=$(basename "$LINUX_FILE")
          MAC_BASENAME=$(basename "$MAC_FILE")
          cat > gh-pages/index.html << EOF
          <!DOCTYPE html>
          <html lang="ja">
            <head>
              <meta charset="utf-8">
              <title>YDownloader Installers</title>
              <style>
                body { font-family: Arial, sans-serif; text-align: center; margin: 40px; }
                .container { display: flex; justify-content: center; gap: 20px; }
                .os-box { width: 300px; }
                .os-box img { width: 150px; height: 150px; }
                .os-box button { margin-top: 20px; padding: 10px 20px; font-size: 16px; cursor: pointer; }
              </style>
            </head>
            <body>
              <h1>YDownloader Installers</h1>
              <div class="container">
                <!-- Windows column -->
                <div class="os-box">
                  <img src="OS-Logos/Windows-11-Logo.png" alt="Windows Logo">
                  <br>
                  <a href="$WIN_BASENAME"><button>Download for Windows</button></a>
                </div>
                <!-- Linux column -->
                <div class="os-box">
                  <div class="os-box">
                  <br>
                  <a href="$LINUX_BASENAME"><button>Download for Linux</button></a>
                </div>
                <!-- macOS column -->
                <div class="os-box">
                  <img src="OS-Logos/macOS-Logo.png" alt="macOS Logo">
                  <br>
                  <a href="$MAC_BASENAME"><button>Download for macOS</button></a>
                </div>
              </div>
            </body>
          </html>
          EOF

      - name: Upload GitHub Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      # GitHub Pages の URL を表示
      - name: Display GitHub Pages URL
        run: |
          echo "GitHub Pages URL: ${{ steps.deployment.outputs.page_url }}"

      # GitHub Release の作成
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          body: Installer build for version ${{ env.VERSION }} is available.
          artifacts: releases/*


