name: Build and Release Installers

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    # 各 OS でビルドするためのマトリクス
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: 'stable'
          version: 'stable'

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Extract version from pyproject.toml
        id: get_version
        run: echo "VERSION=$(python -c 'import tomllib; f = open(\"pyproject.toml\", \"rb\"); config = tomllib.load(f); f.close(); print(config[\"project\"][\"version\"])')" >> $GITHUB_ENV

      - name: Determine OS for flet build
        id: set-os
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "os=windows" >> $GITHUB_OUTPUT
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "os=macos" >> $GITHUB_OUTPUT
          else
            echo "os=linux" >> $GITHUB_OUTPUT
          fi

      - name: Create build directory if not exists
        run: mkdir -p build/${{ steps.set-os.outputs.os }}

      - name: Build executable with flet
        run: flet build ${{ steps.set-os.outputs.os }} --output build/${{ steps.set-os.outputs.os }}

      # --- インストーラー作成 ---
      # Windows 用（NSIS を利用）
      - name: Create installer for Windows
        if: runner.os == 'Windows'
        run: |
          # NSIS のインストール（Chocolatey 経由）
          choco install nsis -y
          REM ※ 以下は NSIS スクリプトの例です。build 時の出力パス（ここでは build\windows\YDownloader.exe ）は環境に合わせて調整してください。
          echo '!define PRODUCT_NAME "YDownloader"' > installer.nsi
          echo '!define VERSION "${{ env.VERSION }}"' >> installer.nsi
          echo '!define INSTALL_DIR "$PROGRAMFILES\YDownloader"' >> installer.nsi
          echo '!define CONFIG_DIR "$LOCALAPPDATA\YDownloader"' >> installer.nsi
          echo 'OutFile "YDownloader-Installer.exe"' >> installer.nsi
          echo 'InstallDir ${INSTALL_DIR}' >> installer.nsi
          echo 'Page directory' >> installer.nsi
          echo 'Page instfiles' >> installer.nsi
          echo 'Section "Install"' >> installer.nsi
          echo '  SetOutPath ${INSTALL_DIR}' >> installer.nsi
          echo '  File "build\windows\YDownloader.exe"' >> installer.nsi
          echo '  SetOutPath ${CONFIG_DIR}\configs' >> installer.nsi
          echo '  File /r "configs\*.*"' >> installer.nsi
          echo '  SetOutPath ${CONFIG_DIR}\external' >> installer.nsi
          echo '  File /r "external\*.*"' >> installer.nsi
          echo 'SectionEnd' >> installer.nsi
          makensis installer.nsi

      # macOS 用（pkg ビルダーを利用）
      - name: Create installer for macOS
        if: runner.os == 'macOS'
        run: |
          # pkgbuild でインストーラー作成するための一時フォルダを用意
          mkdir -p pkgroot/Applications
          # flet build で作成された .app を Applications 配下へコピー
          cp -R build/macos/YDownloader.app pkgroot/Applications/
          # configs と external は macOS では ~/Library/Application Support 相当へインストールする例
          mkdir -p pkgroot/Library/Application\ Support/YDownloader
          cp -R configs pkgroot/Library/Application\ Support/YDownloader/
          cp -R external pkgroot/Library/Application\ Support/YDownloader/
          # ※ postinstall スクリプト等を追加すれば、より細かい処理も可能です
          pkgbuild --root pkgroot --identifier com.ydownloader.app --version $VERSION --install-location / YDownloader-Installer.pkg

      # Linux 用（tar.gz による簡易インストーラー例）
      - name: Create installer for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p installer/opt/YDownloader
          cp build/linux/YDownloader installer/opt/YDownloader/
          # Linux では、configs と external を /etc/ydownloader 等へ配置する例
          mkdir -p installer/etc/ydownloader
          cp -R configs installer/etc/ydownloader/
          cp -R external installer/etc/ydownloader/
          # installer フォルダ以下を tar.gz 形式に圧縮
          tar czvf YDownloader-Installer.tar.gz -C installer .

      # ここから先はまだ確認の必要あり
      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: Installer-${{ steps.set-os.outputs.os }}
          path: |
            YDownloader-Installer.exe
            YDownloader-Installer.pkg
            YDownloader-Installer.tar.gz

  # まだ確認の必要あり
  # --- GitHub Pages 用サイトの自動生成 ---
  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all installer artifacts
        uses: actions/download-artifact@v3
        with:
          path: installers

      - name: Generate index.html for download site
        run: |
          mkdir -p gh-pages
          echo "<html><head><title>YDownloader Installers</title></head><body>" > gh-pages/index.html
          echo "<h1>YDownloader Installers</h1><ul>" >> gh-pages/index.html
          for file in $(find installers -type f); do
            fname=$(basename "$file")
            echo "<li><a href=\"$fname\">$fname</a></li>" >> gh-pages/index.html
          done
          echo "</ul></body></html>" >> gh-pages/index.html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: gh-pages
          publish_branch: gh-pages
